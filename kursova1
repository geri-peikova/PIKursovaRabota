/*
	Задача 21:
	Да се състави блок схема и програма, която чете C програма и намира:
		~ броят на коментарите в програмата
		~ броят на операторите в програмата
	
	Програмата да започва с меню със следните опции:
		~ четене програмата от файл и запис на резултата във файл
		  (потребителят трябва да въведе имената на двата файла, като файла с програмата трябва да завършва на ".с")
		~ четене програмта от файл и извеждане на резултата на екрана (файлът въведен от потрбителя трябва да звършва на ".с")
		~ четене на програмата от клавиатура и извеждането на файл зададен от потребителя
		~ четене на програмата от клавиатурата и извеждане на екрана
	Програмата да се реализира в отделни функции. Четенето от файла става по редове.

*/

#define _CRT_SECURE_NO_WARNINGS
#define BUFFERSIZE 50
#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#include<Windows.h>

int prMenu(int choice);
int countComments(char text[], int count_comments);
int countOperators(char text[], int count_operators);

int main() {

	SetConsoleOutputCP(1251);
	int choice=0, count_comments=0, count_operators=0,count=0;
	char text[2000], file_name[300],c, buffer[BUFFERSIZE];
	FILE *file1, *file2;

 	choice = prMenu(choice);

	switch (choice){
		case 1:
			printf("Име на файла за четене: \n");
			fflush(stdout);
			scanf("%s", file_name);
			file1=fopen(file_name,"r");
			if (file1) {
					while ((c = getc(file1)) != EOF){
						text[count]=c;
						count++;
					}

					fclose(file1);
			}

			count_comments = countComments(text, count_comments);
			count_operators = countOperators(text, count_operators);

			printf("Име на файла за писане: \n");
			fflush(stdout);
			scanf("%s", file_name);
			file2=fopen(file_name,"w");
			fprintf(file2,"Брой коментари: %d\n", count_comments);
			fprintf(file2, "Брой оператори: %d\n", count_operators);
			fclose(file2);
			break;

		case 2:
			printf("Име на файла за четене: \n");
			fflush(stdout);
			scanf("%s", file_name);
			file1=fopen(file_name,"r");
			if (file1) {
					while ((c = getc(file1)) != EOF){
						text[count]=c;
						count++;
					}

					fclose(file1);
			}

			count_comments = countComments(text, count_comments);
			count_operators = countOperators(text, count_operators);

			printf("Брой коментари: %d\n", count_comments);
			printf("Брой оператори: %d\n", count_operators);
			break;

		case 3:
			printf("Име на файла за писане: \n");
			fflush(stdout);
			scanf("%s", file_name);
			file2=fopen(file_name,"w");

			printf("Въведете текст: \n");
			fflush(stdout);
			while(fgets(buffer,BUFFERSIZE, stdin)!= NULL){
				count_operators = countOperators(buffer, count_operators);
				count_comments = countComments(buffer, count_comments);
			}
			fprintf(file2,"Брой коментари: %d\n", count_comments);
			fprintf(file2, "Брой оператори: %d\n", count_operators);
			fclose(file2);
			break;
		case 4:
			printf("Въведете текст: \n");
			fflush(stdout);
			while(fgets(buffer,BUFFERSIZE, stdin)!= NULL){
				count_operators = countOperators(buffer, count_operators);
				count_comments = countComments(buffer, count_comments);
			}

			printf("Брой коментари: %d\n", count_comments);
			printf("Брой оператори: %d\n", count_operators);
			break;
	}

	return 0;



}

int prMenu(int choice){

	printf("1: Четене програмата от файл и запис на резултата във файл\n");
	printf("2: Четене програмата от файл и извеждане на резултата на екрана\n");
	printf("3: Четене на програмата от клавиатура и извеждането на файл зададен от потребителя\n");
	printf("4: Четене на програмата от клавиатурата и извеждане на екрана\n");
	printf("\n");
	printf("Въведете вашия избор: \n");
	fflush(stdout);
	scanf("%d",&choice);
	return choice;
}

int countComments(char text[], int count_comments){
    int n=-1;

	for(int i = 0; i<strlen(text); i++){
		if(text[i]=='/' && text[i++]=='/') count_comments++;
		if(text[i]=='/' && text[i++]=='*')n=0;
		if(text[i]=='*' && text[i++]=='/' && n==0){
			n=1;
			count_comments++;
		}
	}

	return count_comments;
}

int countOperators(char text[], int count_operators){
	int check = 0;
	for(int i=0; i<strlen(text); i++){

		if(text[i]=='/' && text[i+1]=='/'){
			while(text[i]!='\n'){
				i++;
			}
		}
		else if(text[i]=='/' && text[i+1]=='*'){
			while(text[i]!='*' && text[i+1]!='/'){
				i++;
			}
		}

		if(text[i]=='d' && text[i+1]=='o'){
			i++;
			if(text[i]==' ' && text[i+1]=='{'){
				count_operators++;
				i++;
				check=1;
			}else if(text[i]=='{'){
				count_operators++;
				check=1;
			}
		}

		else if(text[i]=='f' && text[i+1]=='o' && text[i+2]=='r' &&( text[i+3]=='(' || (text[i+3]==' ' && text[i+4]=='('))){
			count_operators++;
			i+=3;
		}
		else if(text[i]=='w' && text[i+1]=='h' && text[i+2]=='i' && text[i+3]=='l' && text[i+4]=='e' && (text[i+5]=='(' || (text[i+5]==' ' && text[i+6]=='('))){
			if(check==0){
				count_operators++;
				i+=5;
			}else check=0;
		}
		else if(text[i]=='i' && text[i+1]=='f' && (text[i+2]=='(' || (text[i+2]==' ' && text[i+3]=='('))){
			count_operators++;
			i+=2;
		}
		else if(text[i]=='e' && text[i+1]=='l' && text[i+2]=='s' && text[i+3]=='e' && text[i+4]==' '){
			count_operators++;
			i+=5;
			if(text[i]=='i' && text[i+1]=='f' && (text[i+2]=='(' || (text[i+2]==' ' && text[i+3]=='('))){
				i+=2;
			}
		}
		else if(text[i]=='c' && text[i+1]=='o' && text[i+2]=='n' && text[i+3]=='t' && text[i+4]=='i' && text[i+5]=='n' && text[i+6]=='u' && text[i+7]=='e' && text[i+8]==';'){
			i+=8;
			count_operators++;
		}
		else if(text[i]=='b' && text[i+1]=='r' && text[i+2]=='e' && text[i+3]=='a' && text[i+4]=='k' && text[i+5]==';'){
			count_operators++;
			i+=5;
		}
		else if(text[i]=='c' && text[i+1]=='a' && text[i+2]=='s' && text[i+3]=='e' && text[i+4]==' '){
			count_operators++;
			i+=4;
		}
	}

	return count_operators;
}

//C:\Users\35988\eclipse-workspace\text\text.c

